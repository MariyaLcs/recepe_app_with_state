{"version":3,"sources":["Recipe.js","RecipeList.js","Navbar.js","RecipeInput.js","RecipeApp.js","registerServiceWorker.js","index.js"],"names":["Recipe","this","props","title","img","instructions","id","onDelete","ingredients","map","ing","index","key","className","src","alt","type","onClick","Component","RecipeList","recipes","r","Navbar","onNewRecipe","defaultProps","RecipeInput","state","handleChange","bind","handleNewIngredient","handleChangeIng","handleSubmit","e","setState","target","name","value","Number","split","i","preventDefault","onSave","onClose","inputs","size","autoComplete","placeholder","onChange","onSubmit","htmlFor","style","marginTop","rows","cols","alignSelf","marginRight","RecipeApp","nextRecipeId","showForm","handleSave","recipe","prevState","newRecipe","filter","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.bce50e97.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Recipe.css\";\n\nclass Recipe extends Component {\n  render() {\n    const { title, img, instructions, id, onDelete } = this.props;\n    const ingredients = this.props.ingredients.map((ing, index) => (\n      <li key={index}>{ing}</li>\n    ));\n    return (\n      <div className=\"recipe-card\">\n        <div className=\"recipe-card-img\">\n          <img src={img} alt={title} />\n        </div>\n        <div className=\"recipe-card-content\">\n          <h3 className=\"recipe-title\">{title}</h3>\n          <h4>Ingredients:</h4>\n          <ul>{ingredients}</ul>\n          <h4>Instructions:</h4>\n          <p>{instructions}</p>\n          <button type=\"button\" onClick={() => onDelete(id)}>\n            DELETE\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Recipe;\n","import React, { Component } from \"react\";\r\nimport Recipe from \"./Recipe\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./RecipeList.css\";\r\n\r\nclass RecipeList extends Component {\r\n  static propTypes = {\r\n    recipes: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    onDelete: PropTypes.func.isRequired,\r\n  };\r\n\r\n  render() {\r\n    const { onDelete } = this.props;\r\n    const recipes = this.props.recipes.map((r, index) => (\r\n      <Recipe key={r.id} {...r} onDelete={onDelete} />\r\n    ));\r\n\r\n    return <div className=\"recipe-list\">{recipes}</div>;\r\n  }\r\n}\r\n\r\nexport default RecipeList;\r\n","import React, { Component } from \"react\";\r\nimport \"./Navbar.css\";\r\n\r\nclass Navbar extends Component {\r\n  static defaultProps = {\r\n    onNewRecipe() {},\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <header>\r\n        <h2>\r\n          <a>Recipe App</a>\r\n        </h2>\r\n        <nav>\r\n          <li>\r\n            <a onClick={this.props.onNewRecipe}>New Recipe</a>\r\n          </li>\r\n          <li>\r\n            <a>Home</a>\r\n          </li>\r\n          <li>\r\n            <a>About</a>\r\n          </li>\r\n          <li>\r\n            <a>Contact Us</a>\r\n          </li>\r\n        </nav>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","import React, {Component} from 'react';\nimport './RecipeInput.css';\n\nclass RecipeInput extends Component {\n  static defaultProps = {\n    onClose() {},\n    onSave() {}\n  }\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      title: '',\n      instructions: \"\",\n      ingredients: [''],\n      img: ''\n    };\n    \n    this.handleChange = this.handleChange.bind(this);\n    this.handleNewIngredient = this.handleNewIngredient.bind(this);\n    this.handleChangeIng = this.handleChangeIng.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  \n  handleChange(e) {\n    this.setState({[e.target.name]: e.target.value});\n  }\n  \n  handleNewIngredient(e) {\n    const {ingredients} = this.state;\n    this.setState({ingredients: [...ingredients, '']});\n  }\n  \n  handleChangeIng(e) {\n    const index = Number(e.target.name.split('-')[1]);\n    const ingredients = this.state.ingredients.map((ing, i) => (\n      i === index ? e.target.value : ing\n    ));\n    this.setState({ingredients});\n  }\n  \n  handleSubmit(e) {\n    e.preventDefault();\n    this.props.onSave({...this.state});\n    this.setState({\n      title: '',\n      instructions: '',\n      ingredients: [''],\n      img: ''\n    })\n  }\n  \n  render() {\n    const {title, instructions, img, ingredients} = this.state;\n    const {onClose} = this.props;\n    let inputs = ingredients.map((ing, i) => (\n      <div\n        className=\"recipe-form-line\"\n        key={`ingredient-${i}`}\n      >\n        <label>{i+1}.\n          <input\n            type=\"text\"\n            name={`ingredient-${i}`}\n            value={ing}\n            size={45}\n            autoComplete=\"off\"\n            placeholder=\" Ingredient\"\n            onChange={this.handleChangeIng} />\n        </label>\n      </div>\n    ));\n    \n    return (\n      <div className=\"recipe-form-container\">\n        <form className='recipe-form' onSubmit={this.handleSubmit}>\n          <button\n            type=\"button\"\n            className=\"close-button\"\n            onClick={onClose}\n          >\n            X\n          </button>\n          <div className='recipe-form-line'>\n            <label htmlFor='recipe-title-input'>Title</label>\n            <input\n              id='recipe-title-input'\n              key='title'\n              name='title'\n              type='text'\n              value={title}\n              size={42}\n              autoComplete=\"off\"\n              onChange={this.handleChange}/>\n          </div>\n          <label\n            htmlFor='recipe-instructions-input'\n            style={{marginTop: '5px'}}\n          >\n            Instructions\n          </label>\n          <textarea\n            key='instructions'\n            id='recipe-instructions-input'\n            type='Instructions'\n            name='instructions'\n            rows='8'\n            cols='50'\n            autoComplete='off'\n            value={instructions}\n            onChange={this.handleChange}/>\n          {inputs}\n          <button\n            type=\"button\"\n            onClick={this.handleNewIngredient}\n            className=\"buttons\"\n          >\n            +\n          </button>\n          <div className='recipe-form-line'>\n            <label htmlFor='recipe-img-input'>Image Url</label>\n            <input\n              id='recipe-img-input'\n              type='text'\n              placeholder=''\n              name='img'\n              value={img}\n              size={36}\n              autoComplete='off'\n              onChange={this.handleChange} />\n          </div>\n          <button\n            type=\"submit\"\n            className=\"buttons\"\n            style={{alignSelf: 'flex-end', marginRight: 0}}\n          >\n            SAVE\n          </button>\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default RecipeInput;","import React, { Component } from \"react\";\nimport RecipeList from \"./RecipeList\";\nimport Navbar from \"./Navbar\";\nimport RecipeInput from \"./RecipeInput\";\nimport \"./RecipeApp.css\";\n\nclass RecipeApp extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      recipes: [\n        {\n          id: 0,\n          title: \"Doughnut dough\",\n          instructions:\n            \"Put 150g water and all the dough ingredients, apart from the butter, into the bowl of a mixer with a beater paddle. Mix on a medium speed for 8 mins or until the dough starts coming away from the sides and forms a ball. Turn off the mixer and let the dough rest for 1 min. Start the mixer up again on a medium speed and slowly add the butter to the dough – about 25g at a time. Once it is all incorporated, mix on high speed for 5 mins until the dough is glossy, smooth and very elastic when pulled. Cover the bowl with cling film or a clean tea towel and leave to prove until it has doubled in size. Knock back the dough in the bowl briefly, then re-cover and put in the fridge to chill overnight. The next day, take the dough out of the fridge and cut it into 50g pieces (you should get about 20). Roll the dough pieces into smooth, tight buns and place them on a floured baking tray, leaving plenty of room between them, as you don’t want them to stick together while they prove.\",\n          ingredients: [\n            \"500g strong white bread flour\",\n            \"60g golden caster sugar\",\n            \"4 eggs\",\n            \"zest ½ lemon\",\n            \"2 tsp fine sea salt\",\n            \"125g softened unsalted butter\",\n          ],\n          img: \"1.jpg\",\n        },\n        {\n          id: 1,\n          title: \"15-Minute Homemade Donuts\",\n          instructions:\n            \"Preheat oil in a deep saute pan or pot over medium heat. Whisk together flour, sugar, baking powder and salt. In a separate bowl or measuring cup, whisk together buttermilk and melted butter. Add the dry ingredients to the wet and stir until just combined. Gently roll dough into 1/2 tbsp size balls. Carefully place dough balls into the preheated oil (frying about half of them at a time) and fry until golden brown on both sides. Use a spider to transfer to paper towels, then let drain and roll in sugar.\",\n          ingredients: [\n            \"All-purpose flour\",\n            \"Baking powder\",\n            \"Salt\",\n            \"Buttermilk: If you need a substitute then just use 1/2 cup milk mixed with 1.5 tsp vinegar or lemon juice. Rest 5 minutes.\",\n            \"Granulated sugar\",\n            \"Melted butter\",\n          ],\n          img: \"2.jpg\",\n        },\n        {\n          id: 2,\n          title: \"Plain Cake Doughnuts\",\n          instructions:\n            \"Heat oil in deep-fryer to 375 degrees F (190 degrees C). In a large bowl, sift together flour, sugar, salt, baking powder, cinnamon and nutmeg. Mix in butter until crumbly. Stir in milk and egg until smooth. Knead lightly, then turn out onto a lightly floured surface. Roll or pat to 1/4 inch thickness. Cut with a doughnut cutter, or use two round biscuit cutters of different sizes. Carefully drop doughnuts into hot oil, a few at a time. Do not overcrowd pan or oil may overflow. Fry, turning once, for 3 minutes or until golden. Drain on paper towels.\",\n          ingredients: [\n            \"2 cups all-purpose flour\",\n            \"½ cup white sugar\",\n            \"1 teaspoon salt\",\n            \"1 tablespoon baking powder\",\n            \"¼ teaspoon ground cinnamon\",\n            \"2 tablespoons melted butter\",\n            \"½ cup milk\",\n            \"1 egg, beaten\",\n          ],\n          img: \"3.jpg\",\n        },\n      ],\n      nextRecipeId: 3,\n      showForm: false,\n    };\n    this.handleSave = this.handleSave.bind(this);\n    this.onDelete = this.onDelete.bind(this);\n  }\n  handleSave(recipe) {\n    this.setState((prevState, props) => {\n      const newRecipe = { ...recipe, id: this.state.nextRecipeId };\n      return {\n        nextRecipeId: prevState.nextRecipeId + 1,\n        recipes: [...this.state.recipes, newRecipe],\n        showForm: false,\n      };\n    });\n  }\n\n  onDelete(id) {\n    const recipes = this.state.recipes.filter((r) => r.id !== id);\n    this.setState({ recipes });\n  }\n\n  render() {\n    const { showForm } = this.state;\n    return (\n      <div className=\"App\">\n        <Navbar onNewRecipe={() => this.setState({ showForm: true })} />\n        {showForm ? (\n          <RecipeInput\n            onSave={this.handleSave}\n            onClose={() => this.setState({ showForm: false })}\n          />\n        ) : null}\n        <RecipeList onDelete={this.onDelete} recipes={this.state.recipes} />\n      </div>\n    );\n  }\n}\n\nexport default RecipeApp;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport RecipeApp from './RecipeApp';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<RecipeApp />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}